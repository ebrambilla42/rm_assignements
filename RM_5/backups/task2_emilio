{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline \n",
    "from scipy.sparse import random\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simulation with Monte-carlo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we are are going to ask 'Please rate your given average of sleep?'<br>\n",
    "to a **sample_size** number of people "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_size = 40"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "each of this indivividuals can answer with a point a liker scale <br>\n",
    "[too little, a bit too little, just right, a bit too much, too much -- \"sleep\"] -> <br>\n",
    "coded [-2, -1, 0, 1, 2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "possible_answer = [-2, -1, 0, 1, 2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "we know (from the assumptions) that these answers will be: <br>\n",
    "- continuous, \n",
    "- normally distributed values around **expected means** that people could give if asked on a continuous scale \n",
    "\n",
    "<br> 👇 <br>\n",
    "the range would be a continuos number that we have to discritze to the closest integer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "generated numbers description:\n",
      "mean: 0.312542473216174\n",
      "sds: 1.0643338564384413\n"
     ]
    }
   ],
   "source": [
    "expected_mean = 0.0 #float number \n",
    "standard_deviation = 1\n",
    "\n",
    "np.random.seed(0)\n",
    "\n",
    "#create an empty questionnaire containing sample_size number of entries\n",
    "virtual_questionnaire = np.empty(sample_size)\n",
    "\n",
    "#create normally distributed values around expected mean\n",
    "answers_data = np.random.normal(expected_mean,\n",
    "                                standard_deviation,\n",
    "                                sample_size)\n",
    "print('generated numbers description:')\n",
    "print('mean:',answers_data.mean())\n",
    "print('sds:',answers_data.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(\"distribution of Answers generated\")\n",
    "plt.hist(answers_data, ec = 'black')\n",
    "plt.xlabel('answers')\n",
    "plt.ylabel('times')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fill the questionnaire with the generated roundom numbers\n",
    "temp_index = np.arange(len(virtual_questionnaire))\n",
    "np.put(virtual_questionnaire, temp_index, answers_data)\n",
    "\n",
    "#round up numbers to closest int -> int(round(x))\n",
    "rounded_answers = list(map(\n",
    "                            lambda x: int((round(x))),\n",
    "                            virtual_questionnaire))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# task 1.b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing Required Libraries for python computation and setting display options\n",
    "\n",
    "import pandas as pd\n",
    "import plotly.graph_objects as go\n",
    "import plotly.express as px\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import math\n",
    "import requests\n",
    "import io\n",
    "import datetime\n",
    "from plotly import tools, subplots\n",
    "from statsmodels.stats.power import tt_ind_solve_power, TTestIndPower\n",
    "\n",
    "\n",
    "#download data\n",
    "url_group_c = \"https://raw.githubusercontent.com/ebrambilla42/rm_assignments/master/RM_5/Group_C_Sleep_Questionnaire.csv\"\n",
    "url_group_d = \"https://raw.githubusercontent.com/ebrambilla42/rm_assignments/master/RM_5/Group_D_Sleep_Questionnaire.csv\"\n",
    "\n",
    "download_group_c = requests.get(url_group_c).content\n",
    "download_group_d = requests.get(url_group_d).content\n",
    "\n",
    "\n",
    "group_c = pd.read_csv(io.StringIO(download_group_c.decode('utf-8')))\n",
    "group_d = pd.read_csv(io.StringIO(download_group_d.decode('utf-8')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>What is your age?</th>\n",
       "      <th>How many people live in your household?</th>\n",
       "      <th>How many hours do you exercise per week?</th>\n",
       "      <th>How many hours do you sleep on average per night?</th>\n",
       "      <th>How many cups (250 ml) of coffee (or equivalents) do you drink per day?</th>\n",
       "      <th>How many hours do you wait to sleep after dinner?</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>32.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>32.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>24.250000</td>\n",
       "      <td>3.312500</td>\n",
       "      <td>5.468750</td>\n",
       "      <td>7.031250</td>\n",
       "      <td>0.781250</td>\n",
       "      <td>2.937500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.032002</td>\n",
       "      <td>1.512048</td>\n",
       "      <td>8.285177</td>\n",
       "      <td>0.966683</td>\n",
       "      <td>1.099395</td>\n",
       "      <td>1.457738</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>18.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>23.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.750000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>24.000000</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>26.000000</td>\n",
       "      <td>4.250000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>28.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       What is your age?  How many people live in your household?  \\\n",
       "count          32.000000                                32.000000   \n",
       "mean           24.250000                                 3.312500   \n",
       "std             2.032002                                 1.512048   \n",
       "min            18.000000                                 1.000000   \n",
       "25%            23.000000                                 2.000000   \n",
       "50%            24.000000                                 3.500000   \n",
       "75%            26.000000                                 4.250000   \n",
       "max            28.000000                                 6.000000   \n",
       "\n",
       "       How many hours do you exercise per week?  \\\n",
       "count                                 32.000000   \n",
       "mean                                   5.468750   \n",
       "std                                    8.285177   \n",
       "min                                    0.000000   \n",
       "25%                                    1.750000   \n",
       "50%                                    3.000000   \n",
       "75%                                    7.000000   \n",
       "max                                   44.000000   \n",
       "\n",
       "       How many hours do you sleep on average per night?  \\\n",
       "count                                          32.000000   \n",
       "mean                                            7.031250   \n",
       "std                                             0.966683   \n",
       "min                                             5.000000   \n",
       "25%                                             6.000000   \n",
       "50%                                             7.000000   \n",
       "75%                                             8.000000   \n",
       "max                                             8.000000   \n",
       "\n",
       "       How many cups (250 ml) of coffee (or equivalents) do you drink per day?  \\\n",
       "count                                          32.000000                         \n",
       "mean                                            0.781250                         \n",
       "std                                             1.099395                         \n",
       "min                                             0.000000                         \n",
       "25%                                             0.000000                         \n",
       "50%                                             0.000000                         \n",
       "75%                                             1.000000                         \n",
       "max                                             5.000000                         \n",
       "\n",
       "       How many hours do you wait to sleep after dinner?  \n",
       "count                                          32.000000  \n",
       "mean                                            2.937500  \n",
       "std                                             1.457738  \n",
       "min                                             0.000000  \n",
       "25%                                             2.000000  \n",
       "50%                                             3.000000  \n",
       "75%                                             4.000000  \n",
       "max                                             6.000000  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sleeping_data = {}\n",
    "sleeping_data['Gender'] = group_c['Gender']\n",
    "sleeping_data['Total Sleep Hours'] = group_c['Total Sleeping Hours']\n",
    "sleeping_data = pd.DataFrame.from_dict(sleeping_data)\n",
    "\n",
    "group_d.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 2.3\n",
    "\n",
    "How could you model common biases (at least 2) and how would they affect the outcome and power? Use the tuple means and sds, compute, interprete, and vizualize."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "as Stated in: <br>\n",
    "Podsakoff, P. M., MacKenzie, S. B., Lee, J.-Y., & Podsakoff, N. P. (2003). Common method biases in behavioral research: A critical review of the literature and recommended remedies. Journal of Applied Psychology, 88(5), 879-903. doi: 10.1037/0021-9010.88.5.879 <br>\n",
    "\n",
    "Common method bias (CMB) happens when variations in responses are caused by the instrument rather than the actual predispositions of the respondents that the instrument attempts to uncover. In other words, the instrument introduces a bias, hence variances, which you will be analysing. Consequently, the results you get is contaminated by the 'noise' stemming from the biased instruments. \n",
    "\n",
    "Therefore we tried to come up with a resonable 2 explanations for causing this problem:\n",
    "1. the likert scale range may not capture enough the details about the actual study\n",
    "1. rounding up values may vary the actual data, people that sleep for 6.5 hours now sleep for 7 hours\n",
    "\n",
    "to investigate these 2 potencial issues we will therefore procede with a new Monte-carlo simulation:  \n",
    "\n",
    "\n",
    "\n",
    "</to do>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 2.2\n",
    "What is the power of the t-test (2 sample, independent) <br>\n",
    "and the Mann-Whitney-U test? <br>\n",
    "Compute for the mean tuples and sds (standard deviations). Interprete your results. <br>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**indipendent t-test** <br>\n",
    "since the groups come from two different populations, it is a valid approach to perform a two-sample t-test\n",
    "\n",
    "To measure the power of the t test we can simply employ the library *statsmodels.stats.power.TTestPower.power* with the following parameters:\n",
    "- power: what we want to find\n",
    "- effect_size: difference between the two means divided by the standard deviation (Cohen's Effect Size)\n",
    "- nobs1 (number of observations of sample 1): sample size of group C (n= 30)\n",
    "- alpha: 0.05\n",
    "- alternative: and since the hypotesis to be checked is 𝐻1:𝜇1≠𝜇2, we have to use a two tail test\n",
    "- ratio (number of observations of sample 2): ratio of group C : D (n= 32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "std: 0.2 & means:[0.53,0.47] \n",
      " -> power: 0.21271821582947206\n",
      "std: 0.2 & means:[1,-1] \n",
      " -> power: 1.0\n",
      "std: 0.2 & means:[1.5,0.5] \n",
      " -> power: 1.0\n",
      "std: 0.2 & means:[1,0] \n",
      " -> power: 1.0\n",
      "std: 0.2 & means:[-2,-1] \n",
      " -> power: 1.0\n",
      "std: 0.3 & means:[0.53,0.47] \n",
      " -> power: 0.12080346341157183\n",
      "std: 0.3 & means:[1,-1] \n",
      " -> power: 1.0\n",
      "std: 0.3 & means:[1.5,0.5] \n",
      " -> power: 1.0\n",
      "std: 0.3 & means:[1,0] \n",
      " -> power: 1.0\n",
      "std: 0.3 & means:[-2,-1] \n",
      " -> power: 1.0\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.stats.power as smp\n",
    "mean_tuples = [[0.53, 0.47], [1,-1], [1.5, 0.5], [1, 0], [-2, -1]]\n",
    "std_1 = 0.2\n",
    "std_2 = 0.3\n",
    "stds=[0.2, 0.3]\n",
    "\n",
    "#t_test_power_calculation\n",
    "for std in stds:\n",
    "    for item in mean_tuples:\n",
    "        \n",
    "        effect_size= (item[0]-item[1])/std\n",
    "        power = smp.tt_ind_solve_power(power=None, \n",
    "                                       effect_size= effect_size, \n",
    "                                       nobs1=30, \n",
    "                                       alpha=0.05, \n",
    "                                       alternative='two-sided', \n",
    "                                       ratio=1.06)\n",
    "        print(\"std:\",std,\"& means:[{},{}]\".format(item[0],item[1]),\"\\n -> power:\", power)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Power of the test, < >, is one minus the probability of a type II error. Power is the probability that the test correctly rejects the Null Hypothesis if the Alternative Hypothesis is true.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**mann withney t-test**\n",
    "\n",
    "[Reference](https://ncss-wpengine.netdna-ssl.com/wp-content/themes/ncss/pdf/Procedures/PASS/Mann-Whitney_U_or_Wilcoxon_Rank-Sum_Tests.pdf)\n",
    "\n",
    "Mann–Whitney–Wilcoxon basic assumptions:\n",
    "- random sampling from each of the two populations \n",
    "- that the measurement scale is at least ordinal\n",
    "\n",
    "our case is therefore eligible for this type of test.\n",
    "\n",
    "Unfortunatley there's **no evidence of pre-made library** to calucate the power of a mannwithney-u test, however we can run a simultaion to find it out.\n",
    "\n",
    "1. two samples are generated based on selected criteria (distribution, sample sizes and effect sizes).\n",
    "1. The Mann-Whitney test is then performed on these samples to determine whether or not there is a significant result.\n",
    "1. If a large number of such samples are generated at random, we can determine **what percentage of these samples yields a significant result**. This percentage is an **estimate for the power** of the MW test.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "Therefore, we'll run a Monte-Carlo sampling 100 times (not a fixed parameter ?), and then investigate how many times it correctly reject our null hypothesis  \n",
    "\n",
    "\n",
    "\n",
    "<!--\n",
    "\"the power The power calculation for the Mann-Whitney U or Wilcoxon Rank-Sum Test is the same as that for the two-sample equal-variance t-test except that an adjustment is made to the sample size based on an assumed data distribution\" \n",
    "\n",
    "For a Mann-Whitney U or Wilcoxon Rank-Sum Test group sample sizes, the adjusted sample sizes used in power calculations is equal to\n",
    "\n",
    "$n1* = n1/W$ <br>\n",
    "$n2* = n2/W $ <br>\n",
    "\n",
    "where W depends on the distribution of the samples (normal distribution -> $W=\\pi/3$)\n",
    "//-->"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "generated numbers description:\n",
      "mean: 0.312542473216174\n",
      "sds: 1.0643338564384413\n"
     ]
    }
   ],
   "source": [
    "\n",
    "expected_mean = 0.0 #float number \n",
    "standard_deviation = 1\n",
    "\n",
    "np.random.seed(0)\n",
    "\n",
    "#create an empty questionnaire containing sample_size number of entries\n",
    "virtual_questionnaire = np.empty(sample_size)\n",
    "\n",
    "#create normally distributed values around expected mean\n",
    "answers_data = np.random.normal(expected_mean,\n",
    "                                standard_deviation,\n",
    "                                sample_size)\n",
    "print('generated numbers description:')\n",
    "print('mean:',answers_data.mean())\n",
    "print('sds:',answers_data.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "        \n",
    "        \n",
    "    \n",
    "    \n",
    "    \n",
    "        u,pvalue=  mannwhitneyu(x = male_simulation_1,      #sample1 simulation_1['Male'],\n",
    "                                y = female_simulation_1,    #sample2 simulation_1['Female'],\n",
    "                                use_continuity=True,\n",
    "                                alternative='two-sided')\n",
    "        if(pvalue > 0.05):\n",
    "            correctly_reject += 1\n",
    "    print(\"reject: \", (correctly_reject/sampling))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.stats import mannwhitneyu\n",
    "alpha = 0.05\n",
    "#Sampling = N volte mean\n",
    "#samples = population = 30 min num to be statistic significant\n",
    "\n",
    "def monte_carlo_simulation(male_mean, female_mean, std_1, samples, sampling, number):\n",
    "    sampling_distribution = []\n",
    "    power = 0\n",
    "    for i in range(sampling):\n",
    "        \n",
    "        #creation of 30 random samples \n",
    "        male_simulation = np.random.normal(male_mean, std_1, samples).round(1)\n",
    "        female_simulation = np.random.normal(female_mean, std_1, samples).round(1) \n",
    "        \n",
    "        #create_mean of two samples\n",
    "        male_mean = male_simulation.mean() \n",
    "        female_mean = female_simulation.mean()\n",
    "        \n",
    "        #calculate difference of mean \n",
    "        difference_of_means = (male_mean - female_mean).round(2)\n",
    "        \n",
    "        sampling_distribution.append(difference_of_means)\n",
    "        \n",
    "        u,pvalue=  mannwhitneyu(x = male_simulation,      #sample1 simulation_1['Male'],\n",
    "                                y = female_simulation,    #sample2 simulation_1['Female'],\n",
    "                                use_continuity=True,\n",
    "                                alternative='two-sided')\n",
    "        if (pvalue < alpha):\n",
    "            power += 0.01\n",
    "    \n",
    "    \n",
    "    print(int(power*100),'%')\n",
    "    \n",
    "    \n",
    "    plt.title(\"distribution of Answers generated\")\n",
    "    plt.hist(sampling_distribution, ec = 'black')\n",
    "    plt.xlabel('answers')\n",
    "    plt.ylabel('times')\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean_tuple :  [0.53, 0.47]\n",
      "67 %\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean_tuple :  [1, -1]\n",
      "100 %\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean_tuple :  [1.5, 0.5]\n",
      "100 %\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean_tuple :  [1, 0]\n",
      "100 %\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean_tuple :  [-2, -1]\n",
      "100 %\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mean_tuples = [[0.53, 0.47], [1,-1], [1.5, 0.5], [1, 0], [-2, -1]]\n",
    "stds=[0.2, 0.3]\n",
    "\n",
    "for item in mean_tuples:\n",
    "    print (\"mean_tuple : \", item)\n",
    "    \n",
    "    monte_carlo_simulation(male_mean= item[0], \n",
    "                           female_mean= item[1],\n",
    "                           std_1 = stds[0], \n",
    "                           #std_2 = stds[1],\n",
    "                           samples= 10, \n",
    "                           sampling = 100,\n",
    "                           number = None)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate(std_1, std_2):\n",
    "    \n",
    "    for i in range(len(mean_tuples)):\n",
    "        monte_carlo_simulation(mean_tuples[i][0], mean_tuples[i][1], std_1, std_2, 30, 100, ((i + 1)*2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# task 2.4\n",
    "\n",
    "4. For the case (1.5, 0.5), how large would the sample have to be to get a power of 80% at α=5%? Use the different sds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "**** std:  0.2 ****\n",
      "power: 0.21271821582947206\n",
      "\n",
      "\n",
      "**** std:  0.3 ****\n",
      "power: 0.12080346341157183\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.stats.power as smp\n",
    "mean= (1.5, 0.5)\n",
    "alpha = 0.05\n",
    "stds=[0.2, 0.3]\n",
    "\n",
    "#t_test_power_calculation\n",
    "for std in stds:\n",
    "    print('****','std: ',std,'****')\n",
    "    #power calculation\n",
    "    effect_size= (means[0]-means[1])/std\n",
    "    while()\n",
    "    power = smp.tt_ind_solve_power(power=None, \n",
    "                                   effect_size= effect_size, \n",
    "                                   nobs1=30, \n",
    "                                   alpha=alpha, \n",
    "                                   alternative='two-sided', \n",
    "                                   ratio=1.06)\n",
    "\n",
    "    print(\"power:\", power)\n",
    "    print('\\n')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
